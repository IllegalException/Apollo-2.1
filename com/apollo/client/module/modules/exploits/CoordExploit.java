//Decomped by XeonLyfe

package com.apollo.client.module.modules.exploits;

import com.apollo.client.module.*;
import com.apollo.api.values.*;
import net.minecraft.entity.*;
import net.minecraft.entity.player.*;
import com.apollo.api.util.world.*;
import com.apollo.client.command.*;
import java.util.*;
import java.io.*;
import net.minecraft.util.math.*;

public class CoordExploit extends Module
{
    private final HashMap knownPlayers;
    private final HashMap tpdPlayers;
    private int numTicks;
    private int numForgetTicks;
    Value.Boolean chatMessages;
    
    public CoordExploit() {
        super("CoordExploit", Module.Category.Exploits);
        this.knownPlayers = new HashMap();
        this.tpdPlayers = new HashMap();
        this.numTicks = 0;
        this.numForgetTicks = 0;
    }
    
    public void setup() {
        this.chatMessages = this.registerBoolean("Chat Messages", "ChatMessages", false);
    }
    
    public void dump() {
        for (final Entity entity : CoordExploit.mc.world.loadedEntityList) {
            if (entity instanceof EntityPlayer) {
                System.out.println(entity.getName() + ": " + WorldUtils.vectorToString(entity.getPositionVector(), new boolean[0]));
                Command.sendClientMessage(entity.getName() + ": " + WorldUtils.vectorToString(entity.getPositionVector(), new boolean[0]));
            }
        }
    }
    
    public void clear() {
        this.knownPlayers.clear();
    }
    
    public void saveFile(final String pos, final String name) {
        try {
            final File file = new File("./GameSense/Messages/CoordExploit.json");
            file.getParentFile().mkdirs();
            final PrintWriter writer = new PrintWriter(new FileWriter(file, true));
            writer.println("name: " + name + " coords: " + pos);
            writer.close();
        }
        catch (Exception var5) {
            Command.sendClientMessage("Error saving file: " + var5);
        }
    }
    
    public void onUpdate() {
        if (this.isEnabled()) {
            if (this.numTicks >= 50) {
                this.numTicks = 0;
                for (final Entity entity : CoordExploit.mc.world.loadedEntityList) {
                    if (entity instanceof EntityPlayer && !entity.getName().equals(CoordExploit.mc.player.getName())) {
                        final Vec3d playerPos = new Vec3d((double)(int)entity.posX, (double)(int)entity.posY, (double)(int)entity.posZ);
                        if (this.knownPlayers.containsKey(entity)) {
                            if (Math.abs(this.knownPlayers.get(entity).distanceTo(playerPos)) > 50.0 && Math.abs(CoordExploit.mc.player.getPositionVector().distanceTo(playerPos)) > 100.0 && (!this.tpdPlayers.containsKey(entity.getName()) || this.tpdPlayers.get(entity.getName()) != playerPos)) {
                                if (this.chatMessages.getValue()) {
                                    Command.sendClientMessage("Player " + entity.getName() + " teleported to " + WorldUtils.vectorToString(playerPos, new boolean[0]));
                                }
                                this.saveFile(WorldUtils.vectorToString(playerPos, new boolean[0]), entity.getName());
                                this.knownPlayers.remove(entity);
                                this.tpdPlayers.put(entity.getName(), playerPos);
                            }
                            this.knownPlayers.put(entity, playerPos);
                        }
                        else {
                            this.knownPlayers.put(entity, playerPos);
                        }
                    }
                }
            }
            if (this.numForgetTicks >= 9000000) {
                this.tpdPlayers.clear();
            }
            ++this.numTicks;
            ++this.numForgetTicks;
        }
    }
}
